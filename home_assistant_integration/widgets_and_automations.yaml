# This file contains additional widgets for the integration of ebusd widgets in HomeAssistant.
# Copyright (C) 2023 ysard <ysard@users.noreply.github.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

input_select:
  z1_thermoreg_type:
    name: Z1 Thermoregulation type
    options:
      - "Fixed temp"
      - "Basic On/Off"
      - "Room temp only"
      - "Outdoor temp only"
      - "Outdour and room temp"
    icon: mdi:target

  dhw_comfort_mode:
    name: DHW comfort mode
    options:
      - "Off"
      - "Delayed"
      - "Always on"
    icon: mdi:shower-head

sensor:
  error_code:
    name: "Last error code"
    unique_id: error_code
    icon: mdi:alert-outline

python_scripts:
    # Activate python scripts for format_error_code automation

automation format_error_code:
  - alias: "Format error code"
    id: format_error_code
    trigger:
      platform: mqtt
      topic: "ebusd/boiler/error_code"
    action:
      service: python_script.set_state
      data_template:
        entity_id: sensor.error_code
        state: >-
          {% set error_codes_text_map = {
            "101": "Surchauffe du circuit primaire",
            "102": "Anomalie capteur de pression (court-circuité ou pas de signal)",
            "1P1": "Anomalie débit chauffage",
            "1P2": "Anomalie débit chauffage",
            "1P3": "Anomalie débit chauffage",
            "104": "Anomalie débit chauffage",
            "107": "Anomalie débit chauffage",
            "1P4": "Pression insuffisante, remplissage demandé",
            "1P4": "Pression insuffisante, remplissage demandé",
            "109": "Pression excessive >= 3bars",
            "110": "Défaut sonde sortie échangeur princ.",
            "112": "Défaut sonde entrée échangeur princ",
            "114": "Anomalie sonde extérieure",
            "116": "Thermostat plancher ouvert",
            "118": "Anomalie sonde circuit primaire",
            "103": "Anomalie débit chauffage",
            "105": "Anomalie débit chauffage",
            "106": "Anomalie débit chauffage",
            "108": "Remplissage circuit chauffage demandé",
            "111": "?",
            "1P5": "?",
            "1P6": "?",
            "1P7": "?",
            "1P8": "?",
            "201": "Anomalie sonde sanitaire - URBIA/ SERELIA GREEN",
            "309": "Dysfonctionnement du bloc Gaz",
            "203": "Anomalie sonde ballon - URBIA/ SERELIA GREEN",
            "308": "Erreur de configuration atmosphérique",
            "205": "Anomalie sonde entrée sanitaire (solaire)",
            "2P2": "Anti bactérie non complété (Urbia Green Evo Mod)",
            "209": "Surchauffe ballon - URBIA/ SERELIA GREEN",
            "301": "Anomalie afficheur EEPROM",
            "303": "Anomalie carte principale",
            "304": "Trop de reset effectués (> 5 pour < 15min)",
            "306": "Anomalie carte principale",
            "120": "?",
            "121": "?",
            "122": "?",
            "123": "?",
            "311": "?",
            "312": "?",
            "501": "Absence de flamme",
            "502": "Détect. flamme vanne gaz fermée",
            "504": "Anomalie ionisation brûleur en fonct.",
            "5P1": "Echec première tentative allumage",
            "5P2": "Echec seconde tentative allumage",
            "5P3": "Décollement de flamme",
            "5P4": "Anomalie ionisation brûleur en fonct.",
            "601": "Anomalie débordement fumée (modèle CF)",
            "602": "Contact de la sécurité VMC (modèle VMC)",
            "604": "Vitesse de l'extracteur insuffisante/Anomalie tachymètre",
            "607": "Contact pressostat fermé avec extracteur non alimenté",
            "421": "?",
            "610": "Surchauffe échangeur primaire ; thermofusible ouvert",
            "612": "Anomalie sur ventilateur ; vitesse de ventilation faible pas de signal du tachymètre au démarrage",
            "6P1": "Pas de fermeture contact du pressostat après 20s alimentation extracteur",
            "6P2": "Défaut du pressostat lors d'un fonctionnement de l'extracteur",
            "422": "?",
            "510": "?",
            "511": "?",
            "3P9": "Prévoir entretien. Contacter SAV",
            "620": "?",
            "621": "?",
            "410": "Sonde ambiance non dispo.",
            "411": "Sonde ambiance zone z1 non dispo.",
            "412": "Sonde ambiance zone z2 non dispo.",
            "413": "Sonde ambiance zone z3 non dispo.",
            "414": "Sonde ambiance zone z4 non dispo.",
            "415": "Sonde ambiance zone z5 non dispo.",
            "416": "Sonde ambiance zone z6 non dispo.",
            "---": "Sonde extérieure débranchée",
          } %}
          {% set zone_status_map = {
            "inactive": "Supprimée",
            "zone_inactive": "Supprimée",
            "active": "",
            "z1_active": "Zone 1",
            "z2_active": "Zone 2",
            "z1_z2_active": "Zone 1 et 2",
          } %}
          {% set error_codes_map = {
            ("410", "zone_inactive"): "",
            ("410", "z1_active"): "(411)",
            ("410", "z2_active"): "(412)",
            ("410", "z1_z2_active"): "(411 & 412)",
          } %}
          {% set error_code_value = trigger.payload_json.error_code.value %}
          {% set error_zone_status_value = trigger.payload_json.zone_status.value %}

          {% set error_text = error_codes_text_map.get(error_code_value, "Inconnue") %}
          {% set zone_text = zone_status_map.get(error_zone_status_value, "Inconnue") %}
          {% set error_numeric_code_text = error_codes_map.get((error_code_value, error_zone_status_value), error_code_value) %}

          {% set displayed_text = "{} - {} {}".format(error_text, zone_text, error_numeric_code_text) %}

          {{ displayed_text }}


automation z1_thermoreg_type:
  # This automation script runs when a value is received via MQTT on retained topic: thermostatMode
  # It sets the value selector on the GUI. This selector also had its own automation when the value
  # is changed.
  - alias: "Set Thermoregulation type selector"
    trigger:
      platform: mqtt
      topic: "ebusd/boiler/z1_thermoreg_type"
      # entity_id: input_select.z1_thermoreg_type
    action:
      service: input_select.select_option
      target:
        entity_id: input_select.z1_thermoreg_type
      data:
        option: >
          {% set thermoreg_types_map = {
            'fixed_temp': 'Fixed temp',
            'basic_on_off': 'Basic On/Off',
            'room_temp_only': 'Room temp only',
            'outdoor_temp_only': 'Outdoor temp only',
            'outdoor_and_room': 'Outdour and room temp'
          } %}
          {{ thermoreg_types_map.get(trigger.payload_json.thermoreg_types.value, 'basic_on_off') }}


  # This automation script runs when the selector is changed.
  # It publishes its value to the same MQTT topic it is also subscribed to.
  - alias: "Set Thermoregulation type"
    trigger:
      platform: state
      entity_id: input_select.z1_thermoreg_type
    action:
      service: mqtt.publish
      data:
        topic: "ebusd/boiler/z1_thermoreg_type/set"
        payload: >
          {% set thermoreg_types_map = {
            'Fixed temp': 'fixed_temp',
            'Basic On/Off': 'basic_on_off',
            'Room temp only': 'room_temp_only',
            'Outdoor temp only': 'outdoor_temp_only',
            'Outdour and room temp': 'outdoor_and_room'
           } %}
           {{ thermoreg_types_map.get(states.input_select.z1_thermoreg_type.state, 'basic_on_off') }}


automation dhw_comfort_mode:
  # This automation script runs when a value is received via MQTT on retained topic
  # It sets the value selector on the GUI. This selector also had its own automation when the value
  # is changed.
  - alias: "Set DHW comfort mode selector"
    trigger:
      platform: mqtt
      topic: "ebusd/dhw/dhw_comfort_mode_status_w"
      # entity_id: input_select.dhw_comfort_mode
    action:
      service: input_select.select_option
      target:
        entity_id: input_select.dhw_comfort_mode
      data:
        option: >
          {% set opt_to_display_map = {
            'off': 'Off',
            'delayed_on': 'Delayed',
            'always_on': 'Always on'
          } %}
          {{ opt_to_display_map.get(trigger.payload_json.comfort_modes.value, 'off') }}


  # This automation script runs when the selector is changed.
  # It publishes its value to the same MQTT topic it is also subscribed to.
  - alias: "Set DHW comfort mode"
    trigger:
      platform: state
      entity_id: input_select.dhw_comfort_mode
    action:
      service: mqtt.publish
      data:
        topic: "ebusd/dhw/dhw_comfort_mode_status_w/set"
        payload: >
          {% set display_to_opt_map = {
            'Off': 'off',
            'Delayed': 'delayed_on',
            'Always on': 'always_on'
           } %}
           {{ display_to_opt_map.get(states.input_select.dhw_comfort_mode.state, 'off') }}


homeassistant:
  # Set min/max intervals of entities sent by ebusd daemon through MQTT Discovery
  customize:
    number.ebusd_dhw_dhw_target_temp:
      # Setting 200
      min: 36
      max: 60
      step: 0.1

    number.ebusd_boiler_ext_temp_offset:
      # Setting 249
      min: -3
      max: +3
      step: 0.1

    number.ebusd_boiler_z1_fixed_temp:
      # Setting 402
      # According to heat temp range (setting 420)
      # 0: low temperatures (20;45°C)
      # 1: high temperatures (35;82°C)
      min: 35
      max: 82
      step: 0.1

    number.z1_thermoregulation_slope:
      # Setting 422
      # According to heat temp range (setting 420)
      # 0: low temperatures (0.2;0.8)
      # 1: high temperatures (1.0;3.5)
      min: 1.0
      max: 3.5
      step: 0.1

    number.ebusd_boiler_z1_thermoreg_offset:
      # Setting 423
      # According to heat temp range (setting 420)
      # 0: low temperatures (-7;+7)
      # 1: high temperatures (-14;+14)
      min: -14
      max: +14
      step: 0.1

    number.ebusd_boiler_z1_room_temp_infl:
      # Setting 424
      min: 0
      max: 20
      step: 1

    # Disabled due to conflict with dump_zones_1 setting
    number.ebusd_boiler_z1_water_max_temp:
      # Setting 425
      # According to heat temp range (setting 420)
      # 0: low temperatures (20;45°C)
      # 1: high temperatures (35;82°C)
      min: 35
      max: 82
      step: 0.1

    number.ebusd_boiler_z1_water_min_temp:
      # Setting 426
      # According to heat temp range (setting 420)
      # 0: low temperatures (20;45°C)
      # 1: high temperatures (35;82°C)
      min: 35
      max: 82
      step: 0.1
